# Reelthyme Usage Guide for LLM Agents

This guide helps an LLM integrate with Reelthyme to build realtime conversational applications in Clojure or ClojureScript using OpenAI’s Realtime API.

## Core Functions

- **connect!**: Opens a realtime session and returns a core.async channel.  
  - JVM: WebSocket transport.  
  - ClojureScript: WebRTC transport (audio capture and playback built-in).  
- **stream!** (JVM only): Splits a session channel into `[event-ch stop-audio]`.  
- **capture-audio!** (JVM only): Begins microphone capture, returns a stop function.  
- **Closing** the session channel stops audio and releases resources.

## Usage in Clojure (JVM)

1. Require namespaces:
   ```clojure
   (require '[reelthyme.core :as rt]
            '[reelthyme.schema :as sc]
            '[clojure.core.async :as a])
   ```
2. Connect to a session:
   ```clojure
   (def session-ch (rt/connect! {:xf-in (map sc/validate)}))
   ```
3. Stream events and audio:
   ```clojure
   (let [[ev-ch stop-audio] (rt/stream! session-ch)]
     (a/go-loop []
       (when-let [ev (a/<! ev-ch)]
         ;; handle ev
         (recur))))
   ```
4. Send client events:
   ```clojure
   (a/put! session-ch
           {:type "conversation.item.create"
            :item {...}})
   ```
5. Capture and stop audio:
   ```clojure
   (def stop (rt/capture-audio! session-ch))
   ;; later (stop)
   ```

## Usage in ClojureScript (WebRTC)

1. Require namespaces:
   ```clojure
   (ns my-app.core
     (:require [reelthyme.core :as rt]
               [reelthyme.schema :as sc]
               [cljs.core.async :as a]))
   ```
2. Fetch a session map from your backend and connect:
   ```clojure
   (def session (<! (fetch-session {:modalities ["audio" "text"]})))
   (def session-ch (rt/connect! session {:xf-in (map sc/validate)}))
   ```
3. Read events directly:
   ```clojure
   (a/go-loop []
     (when-let [ev (a/<! session-ch)]
       ;; handle ev
       (recur)))
   ```
4. Send client events with `a/put!` on `session-ch`.  
5. No need for `stream!` or `capture-audio!`—WebRTC handles audio automatically.

## Example Workflow

1. Connect with desired modalities (e.g. `["text" "audio"]`).  
2. For JVM: call `stream!` and `capture-audio!` as needed.  
3. For ClojureScript: read and write on `session-ch` directly.  
4. Close `session-ch` to end the session and release audio.

This guide should equip an LLM to effectively build and manage realtime conversational applications with Reelthyme in both Clojure and ClojureScript environments.
